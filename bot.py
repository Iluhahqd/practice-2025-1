import sqlite3
import logging
from datetime import datetime, timedelta
from random import shuffle
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = "7509476167:AAHSQmcyuGTc45fXIaYNbvPK5Kl0vT2nKvI"
DB_NAME = "quiz_bot.db"
logging.basicConfig(level=logging.INFO)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===
def init_db():
    with sqlite3.connect(DB_NAME) as conn:
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS users (
                        user_id INTEGER PRIMARY KEY,
                        username TEXT,
                        registration_date TEXT,
                        level INTEGER DEFAULT 1,
                        xp INTEGER DEFAULT 0,
                        total_correct INTEGER DEFAULT 0,
                        total_wrong INTEGER DEFAULT 0
                    )''')
        c.execute('''CREATE TABLE IF NOT EXISTS questions (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        question TEXT,
                        correct_answer TEXT,
                        wrong_answer1 TEXT,
                        wrong_answer2 TEXT,
                        wrong_answer3 TEXT
                    )''')
        conn.commit()

def seed_questions():
    sample = [
        ("–°–∫–æ–ª—å–∫–æ –ø–ª–∞–Ω–µ—Ç –≤ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ?", "8", "7", "9", "10"),
        ("–°—Ç–æ–ª–∏—Ü–∞ –ê–≤—Å—Ç—Ä–∞–ª–∏–∏?", "–ö–∞–Ω–±–µ—Ä—Ä–∞", "–°–∏–¥–Ω–µ–π", "–ú–µ–ª—å–±—É—Ä–Ω", "–ü–µ—Ä—Ç"),
    ]
    with sqlite3.connect(DB_NAME) as conn:
        c = conn.cursor()
        for q in sample:
            c.execute("INSERT OR IGNORE INTO questions (question, correct_answer, wrong_answer1, wrong_answer2, wrong_answer3) VALUES (?, ?, ?, ?, ?)", q)
        conn.commit()

# === /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    with sqlite3.connect(DB_NAME) as conn:
        c = conn.cursor()
        c.execute('''INSERT OR IGNORE INTO users (user_id, username, registration_date)
                     VALUES (?, ?, ?)''', (user.id, user.username, datetime.now().isoformat()))
        conn.commit()

    keyboard = [
        [InlineKeyboardButton("üéÆ –ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", callback_data="start_quiz")]
    ]
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# === –ó–∞–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ ===
async def send_question(user_id, query_or_message):
    with sqlite3.connect(DB_NAME) as conn:
        c = conn.cursor()
        c.execute("SELECT id, question, correct_answer, wrong_answer1, wrong_answer2, wrong_answer3 FROM questions ORDER BY RANDOM() LIMIT 1")
        question_row = c.fetchone()

    if not question_row:
        await query_or_message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")
        return

    q_id, question, correct, w1, w2, w3 = question_row
    answers = [correct, w1, w2, w3]
    shuffle(answers)
    buttons = [[InlineKeyboardButton(a, callback_data=f"answer_{q_id}_{a}")] for a in answers]

    await query_or_message.reply_text(
        f"‚ùì {question}",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã ===
async def start_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await send_question(query.from_user.id, query.message)

# === –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    _, q_id, selected = query.data.split("_", 2)

    with sqlite3.connect(DB_NAME) as conn:
        c = conn.cursor()
        c.execute("SELECT correct_answer FROM questions WHERE id = ?", (q_id,))
        correct = c.fetchone()[0]

        if selected == correct:
            c.execute('''UPDATE users
                         SET xp = xp + 10, total_correct = total_correct + 1
                         WHERE user_id = ?''', (query.from_user.id,))
            result_text = f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! +10 XP"
        else:
            c.execute('''UPDATE users
                         SET total_wrong = total_wrong + 1
                         WHERE user_id = ?''', (query.from_user.id,))
            result_text = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct}"

        conn.commit()

    await query.edit_message_text(result_text)
    await send_question(query.from_user.id, query.message)

# === /stats ===
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    with sqlite3.connect(DB_NAME) as conn:
        c = conn.cursor()
        c.execute("SELECT xp, total_correct, total_wrong FROM users WHERE user_id = ?", (user_id,))
        row = c.fetchone()

    if row:
        xp, correct, wrong = row
        await update.message.reply_text(
            f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\nXP: {xp}\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {correct}\n‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {wrong}")
    else:
        await update.message.reply_text("–í—ã –µ—â—ë –Ω–µ –∏–≥—Ä–∞–ª–∏!")

# === –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
def main():
    init_db()
    seed_questions()

    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CallbackQueryHandler(start_quiz, pattern="^start_quiz"))
    app.add_handler(CallbackQueryHandler(handle_answer, pattern="^answer_"))

    app.run_polling()

if __name__ == "__main__":
    main()
